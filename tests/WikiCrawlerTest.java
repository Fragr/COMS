import org.junit.Before;
import org.junit.Test;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Random;

/**
 * Author: Andrew Peterson
 *
 * IMPORTANT: You'll need to change your BASE_URL to
 * "file:///" + System.getProperty("user.dir")
 * or equivalent when creating the new URL
 * to have it correctly find the files generated by the test.
 * Feel free to add/edit test cases and post to piazza
 */
public class WikiCrawlerTest {

    String root;
    int max;
    String[] topics;
    String output;
    ArrayList<String> links;
    String alphabet = "<>;:,?[]{}~`-_=+|!@#$%^&*() /\\ abcdefghijklmnopqrstuvwxyz" +
            "ABCDEFGHIJKLMNOPQRSTUVWXYZ \n \t ";

    private static int NUMBER_OF_LINKS_TO_WRITE = 8;
    private static int NUMBER_OF_FILES_TO_CREATE = 10;

    @Before
    public void init() {
        createRandomFileStructure();
        topics = new String[]{"bar", "baz", "foo" , "foob"};
        output = "WikiTest.txt";
        root = "/wiki/0.txt";
        max = 100;
        links = new ArrayList<>();
    }

    private void createRandomFileStructure() {
        for(int i = 0; i < NUMBER_OF_FILES_TO_CREATE; i++) {
            Path relativePath = Paths.get("./wiki/" + i + ".txt");
            Path absolutePath = relativePath.toAbsolutePath();
            File file = new File(absolutePath.toString());
            try {
                file.createNewFile();
            } catch (IOException e) {
                e.printStackTrace();
                System.out.println("File could not be created. " +
                        "Try creating a directory called /wiki/ in your" +
                        "project.");
            }
            //Write a bunch of garbage that has no paragraph tag
            writeGarbageAndLinks(file, 500, false);
            links = writeRelevantPortionToFile(file, true);
        }
    }

    private void writeGarbageAndLinks(File file, int maxLength, boolean append) {
        Random r = new Random();
        boolean paragraph = false;
        try {
            FileWriter fw = new FileWriter(file, append);
            for(int i = 0; i < maxLength; i++) {
                char c = alphabet.charAt(Math.abs(r.nextInt())%alphabet.length());
                if(paragraph) {
                    while(c == '>') {
                        c = alphabet.charAt(Math.abs(r.nextInt())%alphabet.length());
                    }
                    paragraph = false;
                }
                if(c == 'p' || c == 'P') {
                    paragraph = true;
                }
                if(i%90 == 0) {
                    c = '\n';
                }
                fw.append(c);
                if(r.nextInt(100) < 2) {
                    //Garbage can contain links as well
                    fw.append("\"/wiki/" + (r.nextInt(NUMBER_OF_FILES_TO_CREATE)) + ".txt\"\n");
                }
            }
            fw.append("\n\n\n");
            fw.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /**
     * Writes a bunch of stuff to the file, that does not contain a paragraph tag.
     * @param maxLength The maximum length of stuff to write.
     */
    private void writeGarbageToFile(FileWriter fw, int maxLength) {
        //Theoretically, this method could write a link, but I'm gonna say
        //that that chance is too low for me to care about.
        //If you get a false positive, it might be due to that.
        Random r = new Random();
        try {
            for(int i = 0; i < maxLength; i++) {
                char c = alphabet.charAt(Math.abs(r.nextInt())%alphabet.length());
                if(i%40 == 0) {
                    c = '\n';
                }
                fw.append(c);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private ArrayList<String> writeRelevantPortionToFile(File file, boolean append) {
        Random r = new Random();
        ArrayList<String> links = new ArrayList<>();
        try {
            FileWriter fw = new FileWriter(file, append);
            fw.append("\n----------------------------------------------------\n");
            fw.append("<p>");
            for(int i = 0; i < NUMBER_OF_LINKS_TO_WRITE; i++) {
                writeGarbageToFile(fw, r.nextInt(50));
                //put some hot garbage around our links
                String link = "\"/wiki/" + (r.nextInt(NUMBER_OF_FILES_TO_CREATE)) + ".txt\"";
                fw.append(link);
                links.add(link);
                writeGarbageToFile(fw, r.nextInt(50));
                //more hot garbage
            }
            fw.append("\n----------------------------------------------------\n");
            fw.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return links;
    }

//    @Test
//    public void focused() {
//        WikiCrawler wk = new WikiCrawler(root, max, topics, output);
//        wk.crawl(true);
//    }
//
//    @Test
//    public void notFocused() {
//        WikiCrawler wk = new WikiCrawler(root, max, topics, output);
//        wk.crawl(false);
//    }
}
